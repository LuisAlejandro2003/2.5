Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERR
    SYM

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block }
Rule 2     statement_block -> statement
Rule 3     statement_block -> statement statement_block
Rule 4     statement -> SYSTEM . OUT . PRINTLN ( STRING ) ;

Terminals, with rules where they appear

(                    : 1 4
)                    : 1 4
.                    : 4 4
;                    : 1 1 4
=                    : 1
ERR                  : 
ID                   : 1 1 1
INT                  : 1
LE                   : 1
NUM                  : 1 1
OUT                  : 4
PLUSPLUS             : 1
PR                   : 1
PRINTLN              : 4
STRING               : 4
SYM                  : 
SYSTEM               : 4
error                : 
{                    : 1
}                    : 1

Nonterminals, with rules where they appear

statement            : 2 3 0
statement_block      : 1 3

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block }
    (4) statement -> . SYSTEM . OUT . PRINTLN ( STRING ) ;

    PR              shift and go to state 2
    SYSTEM          shift and go to state 3

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> PR . ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block }

    (               shift and go to state 4


state 3

    (4) statement -> SYSTEM . . OUT . PRINTLN ( STRING ) ;

    .               shift and go to state 5


state 4

    (1) statement -> PR ( . INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block }

    INT             shift and go to state 6


state 5

    (4) statement -> SYSTEM . . OUT . PRINTLN ( STRING ) ;

    OUT             shift and go to state 7


state 6

    (1) statement -> PR ( INT . ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block }

    ID              shift and go to state 8


state 7

    (4) statement -> SYSTEM . OUT . . PRINTLN ( STRING ) ;

    .               shift and go to state 9


state 8

    (1) statement -> PR ( INT ID . = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block }

    =               shift and go to state 10


state 9

    (4) statement -> SYSTEM . OUT . . PRINTLN ( STRING ) ;

    PRINTLN         shift and go to state 11


state 10

    (1) statement -> PR ( INT ID = . NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block }

    NUM             shift and go to state 12


state 11

    (4) statement -> SYSTEM . OUT . PRINTLN . ( STRING ) ;

    (               shift and go to state 13


state 12

    (1) statement -> PR ( INT ID = NUM . ; ID LE NUM ; ID PLUSPLUS ) { statement_block }

    ;               shift and go to state 14


state 13

    (4) statement -> SYSTEM . OUT . PRINTLN ( . STRING ) ;

    STRING          shift and go to state 15


state 14

    (1) statement -> PR ( INT ID = NUM ; . ID LE NUM ; ID PLUSPLUS ) { statement_block }

    ID              shift and go to state 16


state 15

    (4) statement -> SYSTEM . OUT . PRINTLN ( STRING . ) ;

    )               shift and go to state 17


state 16

    (1) statement -> PR ( INT ID = NUM ; ID . LE NUM ; ID PLUSPLUS ) { statement_block }

    LE              shift and go to state 18


state 17

    (4) statement -> SYSTEM . OUT . PRINTLN ( STRING ) . ;

    ;               shift and go to state 19


state 18

    (1) statement -> PR ( INT ID = NUM ; ID LE . NUM ; ID PLUSPLUS ) { statement_block }

    NUM             shift and go to state 20


state 19

    (4) statement -> SYSTEM . OUT . PRINTLN ( STRING ) ; .

    $end            reduce using rule 4 (statement -> SYSTEM . OUT . PRINTLN ( STRING ) ; .)
    PR              reduce using rule 4 (statement -> SYSTEM . OUT . PRINTLN ( STRING ) ; .)
    SYSTEM          reduce using rule 4 (statement -> SYSTEM . OUT . PRINTLN ( STRING ) ; .)
    }               reduce using rule 4 (statement -> SYSTEM . OUT . PRINTLN ( STRING ) ; .)


state 20

    (1) statement -> PR ( INT ID = NUM ; ID LE NUM . ; ID PLUSPLUS ) { statement_block }

    ;               shift and go to state 21


state 21

    (1) statement -> PR ( INT ID = NUM ; ID LE NUM ; . ID PLUSPLUS ) { statement_block }

    ID              shift and go to state 22


state 22

    (1) statement -> PR ( INT ID = NUM ; ID LE NUM ; ID . PLUSPLUS ) { statement_block }

    PLUSPLUS        shift and go to state 23


state 23

    (1) statement -> PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS . ) { statement_block }

    )               shift and go to state 24


state 24

    (1) statement -> PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) . { statement_block }

    {               shift and go to state 25


state 25

    (1) statement -> PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { . statement_block }
    (2) statement_block -> . statement
    (3) statement_block -> . statement statement_block
    (1) statement -> . PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block }
    (4) statement -> . SYSTEM . OUT . PRINTLN ( STRING ) ;

    PR              shift and go to state 2
    SYSTEM          shift and go to state 3

    statement_block                shift and go to state 26
    statement                      shift and go to state 27

state 26

    (1) statement -> PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block . }

    }               shift and go to state 28


state 27

    (2) statement_block -> statement .
    (3) statement_block -> statement . statement_block
    (2) statement_block -> . statement
    (3) statement_block -> . statement statement_block
    (1) statement -> . PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block }
    (4) statement -> . SYSTEM . OUT . PRINTLN ( STRING ) ;

    }               reduce using rule 2 (statement_block -> statement .)
    PR              shift and go to state 2
    SYSTEM          shift and go to state 3

    statement                      shift and go to state 27
    statement_block                shift and go to state 29

state 28

    (1) statement -> PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block } .

    $end            reduce using rule 1 (statement -> PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block } .)
    PR              reduce using rule 1 (statement -> PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block } .)
    SYSTEM          reduce using rule 1 (statement -> PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block } .)
    }               reduce using rule 1 (statement -> PR ( INT ID = NUM ; ID LE NUM ; ID PLUSPLUS ) { statement_block } .)


state 29

    (3) statement_block -> statement statement_block .

    }               reduce using rule 3 (statement_block -> statement statement_block .)

